m = hash()
m[['naive']] = naive(series)
m[['exp_smooth']] = ses(series)
m[['holt']] = holt(series)
m[['arima']] = auto.arima(series)
m[['tbats']] = tbats(series)
m[['ets']] = ets(series)
}
getModels <- function(series) {
m = hash()
m[['naive']] = naive(series)
m[['exp_smooth']] = ses(series)
m[['holt']] = holt(series)
m[['arima']] = auto.arima(series)
m[['tbats']] = tbats(series)
m[['ets']] = ets(series)
return(m)
}
for (state in c("Minnesota")){ #,"California","Delaware","Colorado","Iowa","Georgia","South Dakota",
#             "Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
m = getModels(trainSet)
testSet = tail(before,16)
allData = d[['all']]
}
getModels <- function(series) {
m = hash()
print("naive")
m[['naive']] = naive(series)
print("es")
m[['exp_smooth']] = ses(series)
print("holt")
m[['holt']] = holt(series)
print("arima")
m[['arima']] = auto.arima(series)
print("tbats")
m[['tbats']] = tbats(series)
print("stlf")
m[['stlf']] = stlf(series)
return(m)
}
getMAPE <- function(model,test) {
df_fc = as.data.frame(forecast(model,length(test)))
return(mape(test,df_fc$'Point Forecast'))
}
ma = getMAPE(m[['naive']], testSet)
print(ma)
accuracy(forecast(m[['naive']]), testSet)
df_fc = as.data.frame(forecast(m[['naive']],length(testSet)))
mape(testSet, df_fc$`Point Forecast`)
length(testSet)
length(df_fc$`Point Forecast`)
df_fc$`Point Forecast`
getMAPE <- function(model,test) {
print(length(test))
df_fc = as.data.frame(forecast(model,length(test)))
print(df_fc)
return(mape(test,df_fc$'Point Forecast'))
}
ma = getMAPE(m[['naive']], testSet)
getMAPE <- function(model,test) {
print(length(test))
df_fc = as.data.frame(forecast(model,h=length(test)))
print(df_fc)
return(mape(test,df_fc$'Point Forecast'))
}
ma = getMAPE(m[['naive']], testSet)
getForecasts <- function(series,h) {
fc = hash()
print("naive")
fc[['naive']] = naive(series,h=h)
print("es")
fc[['exp_smooth']] = ses(series,h=h)
print("holt")
fc[['holt']] = holt(series, h=h)
print("arima")
m= auto.arima(series)
fc[['arima']] = forecast(m, h=h)
print("tbats")
m = tbats(series)
fc[['tbats']] = forecast(m, h=h)
print("stlf")
fc[['stlf']] = stlf(series)
return(m)
}
getForecasts <- function(series,h) {
fc = hash()
print("naive")
fc[['naive']] = naive(series,h=h)
print("es")
fc[['exp_smooth']] = ses(series,h=h)
print("holt")
fc[['holt']] = holt(series, h=h)
print("arima")
m= auto.arima(series)
fc[['arima']] = forecast(m, h=h)
print("tbats")
m = tbats(series)
fc[['tbats']] = forecast(m, h=h)
print("stlf")
fc[['stlf']] = stlf(series)
return(fc)
}
for (state in c("Minnesota")){ #,"California","Delaware","Colorado","Iowa","Georgia","South Dakota",
#             "Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
m = getForecasts(trainSet)
testSet = tail(before,16)
allData = d[['all']]
}
for (state in c("Minnesota")){ #,"California","Delaware","Colorado","Iowa","Georgia","South Dakota",
#             "Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
m = getForecasts(trainSet, 16)
testSet = tail(before,16)
allData = d[['all']]
}
print(x)
for (x in m) {
print(x)
}
print(m)
print(m[['arima']])
keys(m)
for (x in keys(m)) {
print(x)
}
print(mape(m$x$'Point Forecast'))
for (x in keys(m)) {
print(x)
print(mape(testSet,m$x$'Point Forecast'))
}
print(testSet,m$x$'Point Forecast')
print(m[[x]]$'Point Forecast')
print(m[['naive']])
print(m['naive'])
print(m[['naive']])
f = m
for (x in keys(f)) {
print(x)
}
for (x in keys(f)) {
print(x)
df_f = as.data.frame(f[[x]])
print(df_f$'Point Forecast')
}
getForecasts <- function(series,h) {
fc = hash()
print("naive")
fc[['naive']] = naive(series,h=h)
print("es")
fc[['exp_smooth']] = ses(series,h=h)
print("holt")
fc[['holt']] = holt(series, h=h)
print("arima")
m= auto.arima(series)
fc[['arima']] = forecast(m, h=h)
print("tbats")
m = tbats(series)
fc[['tbats']] = forecast(m, h=h)
print("stlf")
fc[['stlf']] = stlf(seriesh=h)
return(fc)
}
getForecasts <- function(series,h) {
fc = hash()
print("naive")
fc[['naive']] = naive(series,h=h)
print("es")
fc[['exp_smooth']] = ses(series,h=h)
print("holt")
fc[['holt']] = holt(series, h=h)
print("arima")
m= auto.arima(series)
fc[['arima']] = forecast(m, h=h)
print("tbats")
m = tbats(series)
fc[['tbats']] = forecast(m, h=h)
print("stlf")
fc[['stlf']] = stlf(series,h=h)
return(fc)
}
f[['stlf']] = stlf(trainSet,16)
for (x in keys(f)) {
print(x)
df_f = as.data.frame(f[[x]])
print(df_f$'Point Forecast')
}
for (x in keys(f)) {
print(x)
df_f = as.data.frame(f[[x]])
print(df_f$'Point Forecast')
print(mape(testSet, df_f$`Point Forecast`))
}
mapes = hash()
for (x in keys(f)) {
print(x)
df_f = as.data.frame(f[[x]])
print(df_f$'Point Forecast')
mapes[[x]] = mape(testSet, df_f$`Point Forecast`)
}
print(mapes)
states_mapes = hash()
states_mapes = hash()
for (state in c("Minnesota","California")) { #,"Delaware","Colorado","Iowa","Georgia","South Dakota",
#             "Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
f = getForecasts(trainSet, 16)
testSet = tail(before,16)
mapes = hash()
for (x in keys(f)) {
df_f = as.data.frame(f[[x]])
mapes[[x]] = mape(testSet, df_f$`Point Forecast`)
}
states_mapes[[state]] = mapes
}
for (state in keys(states_mapes)) {
print(states_mapes[[stae]])
}
for (state in keys(states_mapes)) {
print(states_mapes[[state]])
}
save.image("~/GitHub/COVID19/COVID19-early-signs/states-and-regions-rili-forecast.RData")
states_mapes = hash()
for (state in c("Minnesota","California","Delaware","Colorado","Iowa","Georgia","South Dakota",
"Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
f = getForecasts(trainSet, 16)
testSet = tail(before,16)
mapes = hash()
for (x in keys(f)) {
df_f = as.data.frame(f[[x]])
mapes[[x]] = mape(testSet, df_f$`Point Forecast`)
}
states_mapes[[state]] = mapes
}
states_mapes
for (state in c("Maine")) { # c("Minnesota","California","Delaware","Colorado","Iowa","Georgia","South Dakota",
#"Pennsylvania","Tennessee","Maryland","Hawaii","Alabama")) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
trainSet = head(before,461)
f = getForecasts(trainSet, 16)
testSet = tail(before,16)
mapes = hash()
for (x in keys(f)) {
df_f = as.data.frame(f[[x]])
mapes[[x]] = mape(testSet, df_f$`Point Forecast`)
}
states_mapes[[state]] = mapes
}
states_mapes
for (state in keys(states_mapes)) {
print(state)
print(states_mapes[[state]])
}
tbats_forecasts_all = hash()
for (state in states) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
temp_all = d[['all']]
#temp_ets = forecast(before, h=16, level=c(99)) #forecast the 16 weeks after Nov 17, 2019 - use 99% prediction interval
temp_tbats = tbats(before)
temp_forecast = forecast(temp_tbats, h=16)
tbats_forecasts_all[[state]] = temp_forecast
#ets_forecasts_all[[state]] = temp_ets #add forecasts to hash to allow additional plotting, if desired
#observed_all[[state]] = temp_all #add all observed data to hash to allow additional plotting, if desired
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
#plot forecasts and safe to PDF
forecasts_to_pdf <- function(data, states, fileloc) {
path = fileloc
pdf(file=path)
par(mfrow=c(2,1))
freq = 365.25/7
shift = 1/freq #shift x axis back because data is by start of week instead of end
shift
for (loc in states) {
title = paste(loc, "99% Confidence Forecast of rILI-*")
subtitle = "*rILI-: a metric indicating the rate and amount of people seeking\ncare for flu-like symptoms and test negative for flu"
#f = ets_forecasts_all[[loc]]
f = tbats_forecasts_all[[loc]]
a = observed_all[[loc]]
xlabels=c("\nJanuary\n2019","April\n2019","July\n2019","October\n2019","January\n2020","April\n2020")
plot(f, xlim=c(2018.9,2020.2),ylim=c(0,max(a)), main=title, sub=subtitle, fcol=NULL,ylab="rILI-",xaxt="none")
axis(1, at=xax,labels=xlabels, line=.25, col="white")
axis(1,at=xax,labels=FALSE)
lines(tail(a,16), col='red',lwd=1)
lines(head(a,477), col='black') #run as safety to ensure we are using the correct data
legend(2018.9,max(a)*.97, legend=c("Before Nov 17, 2019","After Nov 17, 2019"), col=c("black","red"), lty=c(1,1), cex=.7, bg='lightgray')
d = subset(dates, dates$state==loc, select=c(first_case_date))
dd = decimal_date(ymd(d[1,1])) - shift
d = ymd(d[1,1])
abline(v=dd, col="black",lwd=2, lty=c(2))
text(dd-.01, max(a)*.89, paste("First\nConfirmed\nCase",format(d, format="%B %d, %Y"),sep="\n"),font=2, cex=.6, adj=c(1))
}
#save to file
dev.off()
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
tbats_forecasts_all = hash()
observed_all = hash()
for (state in states) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
temp_all = d[['all']]
#temp_ets = forecast(before, h=16, level=c(99)) #forecast the 16 weeks after Nov 17, 2019 - use 99% prediction interval
temp_tbats = tbats(before)
temp_forecast = forecast(temp_tbats, h=16, level=c(99))
tbats_forecasts_all[[state]] = temp_forecast
#ets_forecasts_all[[state]] = temp_ets #add forecasts to hash to allow additional plotting, if desired
#observed_all[[state]] = temp_all #add all observed data to hash to allow additional plotting, if desired
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
tbats_forecasts_all
for (state in states) {
print(state)
pritn(tail(tbats_forecasts_all[[state]]))
}
for (state in states) {
print(state)
print(tail(tbats_forecasts_all[[state]]))
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
#plot forecasts and safe to PDF
forecasts_to_pdf <- function(data, states, fileloc) {
path = fileloc
pdf(file=path)
par(mfrow=c(2,1))
freq = 365.25/7
shift = 1/freq #shift x axis back because data is by start of week instead of end
shift
for (loc in states) {
title = paste(loc, "99% Confidence Forecast of rILI-*")
subtitle = "*rILI-: a metric indicating the rate and amount of people seeking\ncare for flu-like symptoms and test negative for flu"
#f = ets_forecasts_all[[loc]]
f = tbats_forecasts_all[[loc]]
a = observed_all[[loc]]
print(max(a))
xlabels=c("\nJanuary\n2019","April\n2019","July\n2019","October\n2019","January\n2020","April\n2020")
plot(f, xlim=c(2018.9,2020.2),ylim=c(0,max(a)), main=title, sub=subtitle, fcol=NULL,ylab="rILI-",xaxt="none")
axis(1, at=xax,labels=xlabels, line=.25, col="white")
axis(1,at=xax,labels=FALSE)
lines(tail(a,16), col='red',lwd=1)
lines(head(a,477), col='black') #run as safety to ensure we are using the correct data
legend(2018.9,max(a)*.97, legend=c("Before Nov 17, 2019","After Nov 17, 2019"), col=c("black","red"), lty=c(1,1), cex=.7, bg='lightgray')
d = subset(dates, dates$state==loc, select=c(first_case_date))
dd = decimal_date(ymd(d[1,1])) - shift
d = ymd(d[1,1])
abline(v=dd, col="black",lwd=2, lty=c(2))
text(dd-.01, max(a)*.89, paste("First\nConfirmed\nCase",format(d, format="%B %d, %Y"),sep="\n"),font=2, cex=.6, adj=c(1))
}
#save to file
dev.off()
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
#plot forecasts and safe to PDF
forecasts_to_pdf <- function(data, states, fileloc) {
path = fileloc
pdf(file=path)
par(mfrow=c(2,1))
freq = 365.25/7
shift = 1/freq #shift x axis back because data is by start of week instead of end
shift
for (loc in states) {
title = paste(loc, "99% Confidence Forecast of rILI-*")
subtitle = "*rILI-: a metric indicating the rate and amount of people seeking\ncare for flu-like symptoms and test negative for flu"
#f = ets_forecasts_all[[loc]]
f = tbats_forecasts_all[[loc]]
a = observed_all[[loc]]
print(a)
xlabels=c("\nJanuary\n2019","April\n2019","July\n2019","October\n2019","January\n2020","April\n2020")
plot(f, xlim=c(2018.9,2020.2),ylim=c(0,max(a)), main=title, sub=subtitle, fcol=NULL,ylab="rILI-",xaxt="none")
axis(1, at=xax,labels=xlabels, line=.25, col="white")
axis(1,at=xax,labels=FALSE)
lines(tail(a,16), col='red',lwd=1)
lines(head(a,477), col='black') #run as safety to ensure we are using the correct data
legend(2018.9,max(a)*.97, legend=c("Before Nov 17, 2019","After Nov 17, 2019"), col=c("black","red"), lty=c(1,1), cex=.7, bg='lightgray')
d = subset(dates, dates$state==loc, select=c(first_case_date))
dd = decimal_date(ymd(d[1,1])) - shift
d = ymd(d[1,1])
abline(v=dd, col="black",lwd=2, lty=c(2))
text(dd-.01, max(a)*.89, paste("First\nConfirmed\nCase",format(d, format="%B %d, %Y"),sep="\n"),font=2, cex=.6, adj=c(1))
}
#save to file
dev.off()
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
View(observed_all)
#plot forecasts and safe to PDF
forecasts_to_pdf <- function(data, states, fileloc) {
path = fileloc
pdf(file=path)
par(mfrow=c(2,1))
freq = 365.25/7
shift = 1/freq #shift x axis back because data is by start of week instead of end
shift
for (loc in states) {
title = paste(loc, "99% Confidence Forecast of rILI-*")
subtitle = "*rILI-: a metric indicating the rate and amount of people seeking\ncare for flu-like symptoms and test negative for flu"
#f = ets_forecasts_all[[loc]]
f = tbats_forecasts_all[[loc]]
a = observed_all[[loc]]
xlabels=c("\nJanuary\n2019","April\n2019","July\n2019","October\n2019","January\n2020","April\n2020")
plot(f, xlim=c(2018.9,2020.2),ylim=c(0,max(a)), main=title, sub=subtitle, fcol=NULL,ylab="rILI-",xaxt="none")
axis(1, at=xax,labels=xlabels, line=.25, col="white")
axis(1,at=xax,labels=FALSE)
lines(tail(a,16), col='red',lwd=1)
lines(head(a,477), col='black') #run as safety to ensure we are using the correct data
legend(2018.9,max(a)*.97, legend=c("Before Nov 17, 2019","After Nov 17, 2019"), col=c("black","red"), lty=c(1,1), cex=.7, bg='lightgray')
d = subset(dates, dates$state==loc, select=c(first_case_date))
dd = decimal_date(ymd(d[1,1])) - shift
d = ymd(d[1,1])
abline(v=dd, col="black",lwd=2, lty=c(2))
text(dd-.01, max(a)*.89, paste("First\nConfirmed\nCase",format(d, format="%B %d, %Y"),sep="\n"),font=2, cex=.6, adj=c(1))
}
#save to file
dev.off()
}
ets_forecasts_all = hash()
tbats_forecasts_all = hash()
observed_all = hash()
for (state in states) {
#let test set be the last 48 points of 'before' set
print(state)
d = get_data(state, dat)
before = d[['before']]
temp_all = d[['all']]
#temp_ets = forecast(before, h=16, level=c(99)) #forecast the 16 weeks after Nov 17, 2019 - use 99% prediction interval
temp_tbats = tbats(before)
temp_forecast = forecast(temp_tbats, h=16, level=c(99))
tbats_forecasts_all[[state]] = temp_forecast
#ets_forecasts_all[[state]] = temp_ets #add forecasts to hash to allow additional plotting, if desired
observed_all[[state]] = temp_all #add all observed data to hash to allow additional plotting, if desired
}
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
dev.off()
dev.off()
dev.off()
dev.off()
save.image("~/GitHub/COVID19/COVID19-early-signs/states-and-regions-rili-forecast.RData")
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-tbats-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
path = "C:\\Users\\Kruse\\Documents\\GitHub\\COVID19\\COVID19-early-signs\\state-forecasts-99-pi.pdf"
forecasts_to_pdf(dat,states, path)
plot(tbats_forecasts_all[['South Dakota']])
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL)
lines(observed_all[['South Dakota']],col='red')
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5))
lines(observed_all[['South Dakota']],col='red')
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,6))
lines(observed_all[['South Dakota']],col='red')
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,6))
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL)
lines(observed_all[['South Dakota']],col='red', ylim=c(0,5))
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL)
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5))
lines(observed_all[['South Dakota']],col='red')
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5))
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5),main="d")
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5),main="South Dakota 10 Year Plot and 99% Prediction Interval")
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5),
main="South Dakota 10 Year Plot and 99% Prediction Interval", ylab="rILI-")
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5), xlim=c(2014,2020)
main="South Dakota 10 Year Plot and 99% Prediction Interval", ylab="rILI-")
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL, ylim=c(0,5), xlim=c(2014,2020),
main="South Dakota 10 Year Plot and 99% Prediction Interval", ylab="rILI-")
plot(tbats_forecasts_all[['South Dakota']], fcol=NULL,  xlim=c(2014,2020),
main="South Dakota 6 Year Plot and 99% Prediction Interval", ylab="rILI-")
lines(observed_all[['South Dakota']],col='red')
plot(observed_all[['South Dakota']])
plot(tbats_forecasts_all[['South Dakota']], ylim=c(0,6),fcol=NULL,  xlim=c(2014,2020),
main="South Dakota 6 Year Plot and 99% Prediction Interval", ylab="rILI-")
lines(observed_all[['South Dakota']],col='black')
save.image("~/GitHub/COVID19/COVID19-early-signs/states-and-regions-rili-forecast.RData")
